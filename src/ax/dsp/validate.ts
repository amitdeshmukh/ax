import type { AxAIService } from '../ai/types.js'
import type { AxAIMemory } from '../mem/types.js'

import { AxPromptTemplate, toFieldType } from './prompt.js'
import type { AxField, AxIField } from './sig.js'

export class ValidationError extends Error {
    private fields: AxField[]

    constructor({
        message,
        fields,
    }: Readonly<{
        message: string
        fields: AxField[]
        value?: string
    }>) {
        super(message)
        this.fields = fields
        this.name = this.constructor.name
    }

    public getFixingInstructions = () => {
        return this.fields.map((field) => ({
            name: 'outputError',
            title: 'Output Correction Required',
            description: `The section labeled '${field.title}' either was not generated by the LLM or does not match the expected format of '${toFieldType(field.type)}'. ${this.message} Please revise your response to ensure it conforms to the specified format.`,
        }))
    }

    override toString(): string {
        return [
            `${this.name}: ${this.message}`,
            ...this.fields.map(
                (field) =>
                    `  - ${field.title}: Expected format '${toFieldType(field.type)}'`
            ),
        ].join('\n')
    }

    [Symbol.for('nodejs.util.inspect.custom')](
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _depth: number,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _options: Record<string, unknown>
    ) {
        return this.toString()
    }
}

export function handleValidationError(
    mem: AxAIMemory,
    errorFields: AxIField[],
    ai: Readonly<AxAIService>,
    promptTemplate: Readonly<AxPromptTemplate>,
    sessionId?: string
) {
    mem.add(
        [{
            role: 'user' as const,
            content: promptTemplate.renderExtraFields(errorFields),
        }],
        sessionId
    )
    mem.addTag('error')

    if (ai.getOptions().debug) {
        const errors = errorFields
            .map((field) => `- ${field.title}: ${field.description}`)
            .join('\n')

        const logger = ai.getLogger()
        logger(`‚ùå Error Correction:\n${errors}`, {
            tags: ['error'],
        })
    }
}
